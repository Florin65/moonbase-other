# this is a way of checking if the nodes are permanent or not
# e.g. if you have /dev with some static nodes, and you have
# devfs on top, you will see the underlaying static nodes

create_node()
{		

  local PERMS=$1
  local NODE=$2
  local TYPE=$3
  local MAJOR=$4
  local MINOR=$5

  echo -ne "\tTesting for /dev/$NODE: "

  if [ -e ${FAKEROOT}/dev/$NODE ]; then
	 echo "node already present.";  
  else
	mknod -m $PERMS ${FAKEROOT}/dev/$NODE $TYPE $MAJOR $MINOR
	echo "node created."
  fi
 
}

FAKEROOT=/tmp/UDEV_NODE_ROOT/ 
echo    ""
echo -n "Creating virtual fake root... "       && mkdir ${FAKEROOT}          && echo "done."
echo -n "Creating fake root to check /dev... " && mount --bind / ${FAKEROOT} && echo "done."
echo    "Checking /dev/ for needed static boot nodes... "

create_node 0600 console c 5 1
create_node 0666 null    c 1 3

echo -n "Unmounting fake root... "   && umount ${FAKEROOT} && echo "done."
echo -n "Removing fake root dir... " && rm -rf ${FAKEROOT} && echo "done."

cat << EOF


 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                       *
*   Next time you reboot with a 2.6.X kernel your box will try to       *
*   boot with udev. Make sure your kernel has support for udev.         *
*                                                                       *
*   If you wish to disable this behaviour, you can edit                 *
*   /etc/udev/udev.conf, setting udev_root=/udev instead of             *
*   udev_root=/dev.                                                     *
*                                                                       *
*   You can also disable udev passing on kernel command line            *
*   dev=static, if you have static nodes or                             *
*   dev=devfs, if you wish to carry on using devfs with 2.6 kernels.    *
*                                                                       * 
*   Please refer to http://www.lunar-linux.org for more information.    *
*                                                                       * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


EOF
  
exit 0
